#install.packages("readxl") #install the library
library(readxl)
#install.packages("rjson")
library(rjson)
#install.packages("foreign")
library(foreign)
# Arrays are similar to matrices but can have more than two dimensions.
# USAGE : myarray <- array(vector, dimensions, dimnames)
help(array)
myarray <- array(c(1:80), c(2, 5, 10))
myarray
myarray[1, 2:3, 5]
myarray
myarray[1, , ]
class(myarray[1, , ])
dim1 <- c("A1", "A2")
dim2 <- c("B1", "B2", "B3")
dim3 <- c("C1", "C2", "C3", "C4")
z <- array(1:24, c(2, 3, 4), dimnames=list(dim1, dim2, dim3))
z
z[, , "C4"]
# Access all the items from the first row from matrix one
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
multiarray[c(1), , 1]
thisarray <- c(1:24)
# Access all the items from the first row from matrix one
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
multiarray[c(1), , 1]
2 %in% multiarray
32 %in% multiarray
multiarray
2 %in% multiarray
32 %in% multiarray
which(2 %in% multiarray)
which(32 %in% multiarray)
dim(multiarray)
length(multiarray)
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
level <- c(120,80,75,130)
stage <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, level, stage)
patientdata
class(patientdata) #check the class
is.data.frame(patientdata)#verify the object name
str(patientdata) #shows the details of the function
patientdata
patientdata[1:2]
patientdata[c(2,4),]
patientdata[c("diabetes", "stage")]
attach(diabetes)
attach(patientdata)
age
diabetes
patientdata[3,"age"]
patientdata[3,2]
patientdata
patientdata[3,2] = 27
patientdata
patientdata$age
patientdata[patientdata$age>30,]
patientdata$age[patientdata$age>30]
patientdata$diab_index = patientdata$level/patientdata$age
print(patientdata)
patientpersonal <- data.frame(gender = c("Male",
"Female",
"Female","Male"),
status = c("Married","Single",
"Single","Married"))
print(patientpersonal)
patientdata1 <- data.frame(patientdata,patientpersonal)
print(patientdata1)
patientpersonal1 <- data.frame(patientID  =  c(1, 2, 3, 4),
gender = c("Male",
"Female",
"Female","Male"),
status = c("Married","Single",
"Single","Married"))
print(patientpersonal1)
patientdata
patientdata2<-merge(patientdata,patientpersonal1,by ="patientID")
print(patientdata2)
x <- c(6,8,10)
x
class(x)
is.vector(x)
is.list(x)
list1 <- list(6,8,10)
list1
class(list1)
is.list(list1)
length(list1) #returns length of the object
unlist(list1) #returns a vector
j <- list(c("Joe","Marry","Michael"),
c(55000,12000,7000),
c(46,28,20))
print(j)
length(j)
str(j)
l
j
j[[1]]
j[[2]]
j[[1]][2]
j1 <- list(name=c("Joe","Marry","Michael"),
salary=c(55000,12000,7000),
age=c(46,28,20))
j1
j1$name
j1
j
names(j) <- c("name","salary","age")
print(j)
"Marry" %in% j1
j1
"Marry" %in% j1
"Marry" %in% j1[[1]]
append(j1, "ozan")
j1[[1]][4] = "ozan"
j1
append(j1, "ozan")
j1[[1]][4] = "ozan"
j1
append(j1, "ozan")
j1
append(j1, "ozan", after = 2)
j1[-1]
answers <- c("Strognly Disagree","Disagree",
"Neither Disagree nor Agree",
"Agree",
"Strongly Agree")
print(answers)
class(answers)
#convert into factor
answers <- factor(answers)
answers
levels(answers)
myorder <-  c("Strognly Disagree","Disagree",
"Neither Disagree nor Agree",
"Agree",
"Strongly Agree")
answers <- factor(answers, levels = myorder, ordered = TRUE)
levels(answers)
date<-"11111994"
class(date)
is.Date(date)
as.Date(date)
library(lubridate)
date
new_date <- dmy(date)
new_date
class(new_date)
information <- data.frame( age = c(20,25,28),
height = c(160, 175, 183),
birth_date  = c("20020301","19970315","19940407")
)
information1 <- data.frame( age = c(20,25,28),
height = c(160, 175, 183),
birth_date  = c("2002_03_01","1997_03_15","1994_04_07")
)
information2 <- data.frame( age = c(20,25,28),
height = c(160, 175, 183),
birth_date  = c("01032002","15031997","07041994")
)
str(information)
information$birth_date <- ymd(information1$birth_date)
information
x=c(1,9,0,5,1,9,5,6)
print(x)
which(x==6)#shows the location of 6 in the vector of x
which.max(x)#shows the location of the maximum element of vector of x
which.min(x)#shows the location of the minimum element of vector of x
length(x) #to see the length of the vector
max(x) #maximum value of a vector
min(x) #minimum value of a vector
range(x)#minimum and maximum values of vectors
sum(x)#the summation of all elements of a vector
cumsum(x)#cumulative sum of vector
mean(x)#mean of the vector
median(x)#median of the vector
var(x)#variance of vector
sd(x)#standard deviation of the vector
sort(x)#sort in increasing order
sort(x,decreasing = T)#sort in decreasing order
diff(x)#take the difference of ith and (i+1)th element
x
first_word <- "ali"
second_word <-"ata"
third_word <-"bak"
print(first_word, second_word, third_word) #error!
print(first_word);print(second_word);print(third_word)
cat(first_word, second_word, third_word) #combines multiple items.
cat("odtü", 1956, "yılında","kuruldu.")
x = 8
paste0("This is ", x, "hours", "R Course")
paste("This is ", x, "hours", " R Course")
paste0("This is", x, "hours", "R Course")
paste("This is ", x, "hours", " R Course")
paste("This is", x, "hours", "R Course")
sample(1:25,3) #generate 3 different intergers between 1 and 25
sample(1:25,10,replace = TRUE) #generate 4 integers between 1 and 25 and
sample(1:25,3) #generate 3 different intergers between 1 and 25
set.seed(158) # the recommended way to specify seeds.
sample(1:25,3) #generate 3 different intergers between 1 and 25
sample(1:25,3) #generate 3 different intergers between 1 and 25
set.seed(158) # the recommended way to specify seeds.
sample(1:25,3) #generate 3 different intergers between 1 and 25
x = rnorm(100) #generate 100 number from standard normal distribution.
head(x) # shows first 6 items
head(x,10)
# work with your previous commands
history() # display last 25 commands
# save your command history
savehistory(file="mycodes")
